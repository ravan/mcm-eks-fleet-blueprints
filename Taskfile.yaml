version: "3"

dotenv:
  - .env

vars:
  KUBECONFIG: "--kubeconfig {{.KUBECONFIG_FILE}}"
  KUBECONFIG_RANCHER: "--kubeconfig {{.KUBECONFIG_RANCHER_FILE}}"
  ACK_SYSTEM_NAMESPACE: ack-system
  AWS_REGION: eu-west-1
  OCI_REPO: oci://public.ecr.aws/aws-controllers-k8s
  ACCOUNT_ID: "074597098702"
  CLUSTER: rav-test-eks1
  ACK_CONTROLLER_IAM_ROLE: RavACKIAMControllerRole
  ACK_CONTROLLER_EKS_ROLE: RavACKEKSControllerRole
  ACKEKSControllerRoleArn: arn:aws:iam::{{.ACCOUNT_ID}}:role/MCMACKEKSControllerRole
  FleetBootstrapRoleArn: arn:aws:iam::{{.ACCOUNT_ID}}:role/MCMACKFleetBootstrapRole
  ACKIAMControllerRoleArn: arn:aws:iam::{{.ACCOUNT_ID}}:role/MCMACKIAMControllerRole"

tasks:
  install-eks-pod-identity-agent:
    desc: "Install EKS Pod Identity Agent with proper configuration"
    silent: false
    dir: "research/eks-pod-identity-agent/charts/eks-pod-identity-agent"
    cmds:
      - helm upgrade --install -n kube-system {{.KUBECONFIG}} --set clusterName={{.CLUSTER}} --set env.AWS_REGION={{.AWS_REGION}} eks-pid-agent .

  uninstall-eks-pod-identity-agent:
    silent: true
    dir: "research/eks-pod-identity-agent/charts/eks-pod-identity-agent"
    cmds:
      - helm uninstall -n kube-system {{.KUBECONFIG}} eks-pid-agent

  install-ack-iam-controller:
    silent: false
    cmds:
      - helm upgrade --install --create-namespace -n {{.ACK_SYSTEM_NAMESPACE}} {{.KUBECONFIG}} -f config/iam-controller/values.yaml --version=1.5.1 --set=aws.region={{.AWS_REGION}} ack-iam-controller {{.OCI_REPO}}/iam-chart

  uninstall-ack-iam-controller:
    silent: true
    cmds:
      - helm uninstall {{.KUBECONFIG}} -n {{.ACK_SYSTEM_NAMESPACE}} ack-iam-controller

  install-ack-eks-controller:
    silent: false
    cmds:
      - helm upgrade --install --create-namespace -n {{.ACK_SYSTEM_NAMESPACE}} {{.KUBECONFIG}} -f config/eks-controller/values.yaml --version=1.9.2 --set=aws.region={{.AWS_REGION}} ack-eks-controller {{.OCI_REPO}}/eks-chart

  uninstall-ack-eks-controller:
    silent: true
    cmds:
      - helm uninstall {{.KUBECONFIG}} -n {{.ACK_SYSTEM_NAMESPACE}} ack-eks-controller

  irsa_ack_iam:
    silent: false
    cmds:
      - aws iam create-role --profile mcm-dev --role-name "{{.ACK_CONTROLLER_IAM_ROLE}}" --assume-role-policy-document file://config/iam-controller/trust.json
      - aws iam get-role --profile mcm-dev --role-name={{.ACK_CONTROLLER_IAM_ROLE}} --query Role.Arn --output text
      - aws iam put-role-policy --profile mcm-dev --role-name "{{.ACK_CONTROLLER_IAM_ROLE}}" --policy-name "ack-recommended-policy" --policy-document "file://config/iam-controller/inline-policy.json"

  irsa_ack_eks:
    silent: false
    cmds:
      - aws iam create-role --profile mcm-dev --role-name "{{.ACK_CONTROLLER_EKS_ROLE}}" --assume-role-policy-document file://config/eks-controller/trust.json
      - aws iam get-role --profile mcm-dev --role-name={{.ACK_CONTROLLER_EKS_ROLE}} --query Role.Arn --output text
      - aws iam put-role-policy --profile mcm-dev --role-name "{{.ACK_CONTROLLER_EKS_ROLE}}" --policy-name "ack-recommended-policy" --policy-document "file://config/eks-controller/inline-policy.json"

  associate_pod_id_ack_iam:
    silent: false
    cmds:
      # - aws iam create-role --role-name RavACKIAMControllerRole --assume-role-policy-document file://config/policy/trust-policy.json --profile mcm-dev
      - aws eks create-pod-identity-association --profile mcm-dev --cluster-name {{.CLUSTER}} --namespace {{.ACK_SYSTEM_NAMESPACE}} --service-account ack-iam-controller --role-arn arn:aws:iam::{{.ACCOUNT_ID}}:role/RavACKIAMControllerRole

  setup-pod-identity-ack-iam:
    desc: "Setup IAM role for ACK IAM controller with EKS Pod Identity"
    silent: false
    cmds:
      - aws iam create-role --profile mcm-dev --role-name "{{.ACK_CONTROLLER_IAM_ROLE}}" --assume-role-policy-document file://config/iam-controller/pod-identity-trust.json
      - aws iam put-role-policy --profile mcm-dev --role-name "{{.ACK_CONTROLLER_IAM_ROLE}}" --policy-name "ack-recommended-policy" --policy-document "file://config/iam-controller/inline-policy.json"
      - aws iam get-role --profile mcm-dev --role-name={{.ACK_CONTROLLER_IAM_ROLE}} --query Role.Arn --output text
      - echo "IAM role created with Pod Identity trust policy and permissions attached"

  setup-pod-identity-ack-eks:
    desc: "Setup IAM role for ACK EKS controller with EKS Pod Identity"
    silent: false
    cmds:
      - aws iam create-role --profile mcm-dev --role-name "{{.ACK_CONTROLLER_EKS_ROLE}}" --assume-role-policy-document file://config/eks-controller/pod-identity-trust.json
      - aws iam put-role-policy --profile mcm-dev --role-name "{{.ACK_CONTROLLER_EKS_ROLE}}" --policy-name "ack-recommended-policy" --policy-document "file://config/eks-controller/inline-policy.json"
      - aws iam get-role --profile mcm-dev --role-name={{.ACK_CONTROLLER_EKS_ROLE}} --query Role.Arn --output text
      - echo "IAM role created with Pod Identity trust policy and permissions attached"

  install-ack-iam-controller-pod-identity:
    desc: "Install ACK IAM controller with EKS Pod Identity (no IRSA annotation)"
    silent: false
    cmds:
      - helm upgrade --install --create-namespace -n {{.ACK_SYSTEM_NAMESPACE}} {{.KUBECONFIG}} -f config/iam-controller/values-pod-identity.yaml --version=1.5.1 --set=aws.region={{.AWS_REGION}} ack-iam-controller {{.OCI_REPO}}/iam-chart
      - aws eks create-pod-identity-association --profile mcm-dev --cluster-name {{.CLUSTER}} --namespace {{.ACK_SYSTEM_NAMESPACE}} --service-account ack-iam-controller --role-arn arn:aws:iam::{{.ACCOUNT_ID}}:role/{{.ACK_CONTROLLER_IAM_ROLE}}
      - echo "ACK IAM controller installed with Pod Identity. Waiting for pod to start..."
      - sleep 10
      - kubectl get pods -n {{.ACK_SYSTEM_NAMESPACE}} {{.KUBECONFIG}}

  install-ack-eks-controller-pod-identity:
    desc: "Install ACK EKS controller with EKS Pod Identity (no IRSA annotation)"
    silent: false
    cmds:
      - helm upgrade --install --create-namespace -n {{.ACK_SYSTEM_NAMESPACE}} {{.KUBECONFIG}} -f config/eks-controller/values-pod-identity.yaml --version=1.9.2 --set=aws.region={{.AWS_REGION}} ack-eks-controller {{.OCI_REPO}}/eks-chart
      - aws eks create-pod-identity-association --profile mcm-dev --cluster-name {{.CLUSTER}} --namespace {{.ACK_SYSTEM_NAMESPACE}} --service-account ack-eks-controller --role-arn arn:aws:iam::{{.ACCOUNT_ID}}:role/{{.ACK_CONTROLLER_EKS_ROLE}}
      - echo "ACK EKS controller installed with Pod Identity. Waiting for pod to start..."
      - sleep 10
      - kubectl get pods -n {{.ACK_SYSTEM_NAMESPACE}} {{.KUBECONFIG}}

  cleanup-irsa-ack-iam:
    desc: "Remove OIDC provider association (cleanup IRSA setup)"
    silent: false
    cmds:
      - |
        OIDC_ID=$(aws eks describe-cluster --name {{.CLUSTER}} --region {{.AWS_REGION}} --profile mcm-dev --query "cluster.identity.oidc.issuer" --output text | sed -e "s/^https:\/\///" | cut -d'/' -f4)
        OIDC_ARN="arn:aws:iam::{{.ACCOUNT_ID}}:oidc-provider/oidc.eks.{{.AWS_REGION}}.amazonaws.com/id/$OIDC_ID"
        echo "Deleting OIDC provider: $OIDC_ARN"
        aws iam delete-open-id-connect-provider --open-id-connect-provider-arn "$OIDC_ARN" --profile mcm-dev || echo "OIDC provider already deleted or not found"

  cloudformation-run-ack-controller-roles:
    silent: true
    dir: cloudformation
    cmds:
      - aws cloudformation create-stack --stack-name ack-controllers-roles --template-body file://ack-controllers-roles.yaml --capabilities CAPABILITY_NAMED_IAM --profile mcm-dev
      - aws cloudformation wait stack-create-complete --stack-name ack-controllers-roles --profile mcm-dev
      - aws cloudformation describe-stacks --stack-name ack-controllers-roles  --query 'Stacks[0].Outputs' --profile mcm-dev

  fleet-bootstrap-initial-pod-identitiy-for-target-cluster:
    silent: true
    cmds:
      - ./scripts/bootstrap-cluster.sh --cluster-name {{.CLUSTER}} --role-arn {{.FleetBootstrapRoleArn}} --region {{.AWS_REGION}} --profile mcm-dev

  fleet-cleanup-pod-identities:
    desc: "Delete all pod identity associations created by bootstrap process"
    silent: true
    cmds:
      - |
        echo "Cleaning up pod identity associations for cluster: {{.CLUSTER}}"

        # Delete fleet-bootstrap pod identity association
        echo "Looking for fleet-bootstrap pod identity association..."
        FLEET_BOOTSTRAP_ASSOC=$(aws eks list-pod-identity-associations --profile mcm-dev --cluster-name {{.CLUSTER}} --namespace cattle-fleet-system --service-account fleet-bootstrap --query 'associations[0].associationId' --output text 2>/dev/null || echo "")
        if [ -n "$FLEET_BOOTSTRAP_ASSOC" ] && [ "$FLEET_BOOTSTRAP_ASSOC" != "None" ]; then
          echo "Deleting fleet-bootstrap association: $FLEET_BOOTSTRAP_ASSOC"
          aws eks delete-pod-identity-association --profile mcm-dev --cluster-name {{.CLUSTER}} --association-id "$FLEET_BOOTSTRAP_ASSOC"
        else
          echo "No fleet-bootstrap association found"
        fi

        # Delete ACK EKS controller pod identity association
        echo "Looking for ACK EKS controller pod identity association..."
        ACK_EKS_ASSOC=$(aws eks list-pod-identity-associations --profile mcm-dev --cluster-name {{.CLUSTER}} --namespace {{.ACK_SYSTEM_NAMESPACE}} --service-account ack-eks-controller --query 'associations[0].associationId' --output text 2>/dev/null || echo "")
        if [ -n "$ACK_EKS_ASSOC" ] && [ "$ACK_EKS_ASSOC" != "None" ]; then
          echo "Deleting ACK EKS controller association: $ACK_EKS_ASSOC"
          aws eks delete-pod-identity-association --profile mcm-dev --cluster-name {{.CLUSTER}} --association-id "$ACK_EKS_ASSOC"
        else
          echo "No ACK EKS controller association found"
        fi

        # Delete ACK IAM controller pod identity association
        echo "Looking for ACK IAM controller pod identity association..."
        ACK_IAM_ASSOC=$(aws eks list-pod-identity-associations --profile mcm-dev --cluster-name {{.CLUSTER}} --namespace {{.ACK_SYSTEM_NAMESPACE}} --service-account ack-iam-controller --query 'associations[0].associationId' --output text 2>/dev/null || echo "")
        if [ -n "$ACK_IAM_ASSOC" ] && [ "$ACK_IAM_ASSOC" != "None" ]; then
          echo "Deleting ACK IAM controller association: $ACK_IAM_ASSOC"
          aws eks delete-pod-identity-association --profile mcm-dev --cluster-name {{.CLUSTER}} --association-id "$ACK_IAM_ASSOC"
        else
          echo "No ACK IAM controller association found"
        fi

        echo "Pod identity cleanup complete"

  fleet-define-gitrepo-apply:
    silent: true
    cmds:
      - kubectl apply {{.KUBECONFIG_RANCHER}} -f blueprints/cluster-groups/all-eks-clusters.yaml
      - kubectl apply {{.KUBECONFIG_RANCHER}} -f blueprints/gitrepos/pod-identity-agent-repo.yaml
      - kubectl apply {{.KUBECONFIG_RANCHER}} -f blueprints/gitrepos/ack-controllers-repo.yaml
  
  fleet-reset-gitrepo-definitions:
    silent: true
    cmds:
      - kubectl delete {{.KUBECONFIG_RANCHER}} -f blueprints/gitrepos/pod-identity-agent-repo.yaml
      - kubectl delete {{.KUBECONFIG_RANCHER}} -f blueprints/gitrepos/ack-controllers-repo.yaml

  login-ecr-public-repo:
    silent: true
    cmds:
      - aws ecr-public get-login-password --region us-east-1 --profile mcm-staging | helm registry login --username AWS --password-stdin public.ecr.aws

  get-ack-service-version:
    silent: true
    cmds:
      - curl -sL https://api.github.com/repos/aws-controllers-k8s/{{.CLI_ARGS}}-controller/releases/latest | jq -r '.tag_name | ltrimstr("v")'

  get-oidc-provider:
    silent: true
    cmds:
      - aws eks describe-cluster --name {{.CLUSTER}} --region {{.AWS_REGION}} --profile mcm-dev --query "cluster.identity.oidc.issuer" --output text | sed -e "s/^https:\/\///"

  get-k8s-nodes:
    silent: true
    cmds:
      - kubectl get nodes {{.KUBECONFIG}}
