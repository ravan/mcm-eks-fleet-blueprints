{{- if .Values.stackstate.observabilitySecret.enabled }}
---
# ServiceAccount for the ConfigMap creation Job
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ include "stackstate-k8s-agent.releasename" . }}-url-configmap-creator
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/component: suse-observability-agent
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-weight: "-10"
    helm.sh/hook-delete-policy: before-hook-creation
---
# Role for reading secrets and creating ConfigMaps
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{ include "stackstate-k8s-agent.releasename" . }}-url-configmap-creator
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/component: suse-observability-agent
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-weight: "-10"
    helm.sh/hook-delete-policy: before-hook-creation
rules:
  - apiGroups: [""]
    resources: ["configmaps", "secrets"]
    verbs: ["get", "create", "update", "patch"]
---
{{- if ne .Values.stackstate.observabilitySecret.namespace .Release.Namespace }}
# ClusterRole for reading secrets from external namespace (if different from release namespace)
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: {{ include "stackstate-k8s-agent.releasename" . }}-url-configmap-creator-secrets
  labels:
    app.kubernetes.io/component: suse-observability-agent
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-weight: "-10"
    helm.sh/hook-delete-policy: before-hook-creation
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get"]
    resourceNames: ["{{ tpl .Values.stackstate.observabilitySecret.nameTemplate . }}"]
---
# ClusterRoleBinding for reading secrets
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{ include "stackstate-k8s-agent.releasename" . }}-url-configmap-creator-secrets
  labels:
    app.kubernetes.io/component: suse-observability-agent
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-weight: "-10"
    helm.sh/hook-delete-policy: before-hook-creation
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: {{ include "stackstate-k8s-agent.releasename" . }}-url-configmap-creator-secrets
subjects:
  - kind: ServiceAccount
    name: {{ include "stackstate-k8s-agent.releasename" . }}-url-configmap-creator
    namespace: {{ .Release.Namespace }}
---
{{- else }}
# Role for reading secrets in same namespace as release
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{ include "stackstate-k8s-agent.releasename" . }}-url-configmap-creator-secrets
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/component: suse-observability-agent
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-weight: "-10"
    helm.sh/hook-delete-policy: before-hook-creation
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get"]
    resourceNames: ["{{ tpl .Values.stackstate.observabilitySecret.nameTemplate . }}"]
---
{{- end }}
# RoleBinding for ConfigMap management
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ include "stackstate-k8s-agent.releasename" . }}-url-configmap-creator
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/component: suse-observability-agent
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-weight: "-10"
    helm.sh/hook-delete-policy: before-hook-creation
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: {{ include "stackstate-k8s-agent.releasename" . }}-url-configmap-creator
subjects:
  - kind: ServiceAccount
    name: {{ include "stackstate-k8s-agent.releasename" . }}-url-configmap-creator
    namespace: {{ .Release.Namespace }}
---
{{- if eq .Values.stackstate.observabilitySecret.namespace .Release.Namespace }}
# RoleBinding for reading secrets in same namespace
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ include "stackstate-k8s-agent.releasename" . }}-url-configmap-creator-secrets
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/component: suse-observability-agent
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-weight: "-10"
    helm.sh/hook-delete-policy: before-hook-creation
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: {{ include "stackstate-k8s-agent.releasename" . }}-url-configmap-creator-secrets
subjects:
  - kind: ServiceAccount
    name: {{ include "stackstate-k8s-agent.releasename" . }}-url-configmap-creator
    namespace: {{ .Release.Namespace }}
---
{{- end }}
# Job to create ConfigMap from external secret
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "stackstate-k8s-agent.releasename" . }}-url-configmap-creator
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/component: suse-observability-agent
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-weight: "-5"
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
spec:
  ttlSecondsAfterFinished: 60
  backoffLimit: 3
  template:
    metadata:
      name: {{ include "stackstate-k8s-agent.releasename" . }}-url-configmap-creator
      labels:
        app.kubernetes.io/component: suse-observability-agent
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      serviceAccountName: {{ include "stackstate-k8s-agent.releasename" . }}-url-configmap-creator
      restartPolicy: OnFailure
      containers:
        - name: create-configmap
          image: "alpine/k8s:1.29.2"
          imagePullPolicy: IfNotPresent
          command:
            - /bin/bash
            - -c
            - |
              set -e

              # Read from external secret
              SECRET_NAME="{{ tpl .Values.stackstate.observabilitySecret.nameTemplate . }}"
              SECRET_NAMESPACE="{{ .Values.stackstate.observabilitySecret.namespace }}"
              URL_KEY="{{ .Values.stackstate.observabilitySecret.urlKey }}"
              API_KEY_KEY="{{ .Values.stackstate.observabilitySecret.apiKeyKey }}"
              CONFIGMAP_NAME="{{ include "stackstate-k8s-agent.url.configmap.internal.name" . }}"
              INTERNAL_SECRET_NAME="{{ include "stackstate-k8s-agent.secret.internal.name" . }}"

              echo "Reading secret: $SECRET_NAMESPACE/$SECRET_NAME"

              # Extract URL from secret
              URL=$(kubectl get secret "$SECRET_NAME" -n "$SECRET_NAMESPACE" -o jsonpath="{.data.$URL_KEY}" | base64 -d)

              if [ -z "$URL" ]; then
                echo "Error: URL not found in secret $SECRET_NAMESPACE/$SECRET_NAME with key $URL_KEY"
                exit 1
              fi

              # Extract API key from secret
              API_KEY=$(kubectl get secret "$SECRET_NAME" -n "$SECRET_NAMESPACE" -o jsonpath="{.data.$API_KEY_KEY}" | base64 -d)

              if [ -z "$API_KEY" ]; then
                echo "Error: API key not found in secret $SECRET_NAMESPACE/$SECRET_NAME with key $API_KEY_KEY"
                exit 1
              fi

              echo "Creating ConfigMap: $CONFIGMAP_NAME with URL: $URL"

              # Create or update ConfigMap
              kubectl create configmap "$CONFIGMAP_NAME" \
                --from-literal=STS_URL="$URL" \
                --from-literal=STS_STS_URL="$URL" \
                --dry-run=client -o yaml | kubectl apply -f -

              echo "ConfigMap created successfully"

              echo "Creating Secret: $INTERNAL_SECRET_NAME with API key"

              # Generate cluster auth token (32 random alphanumeric characters)
              CLUSTER_AUTH_TOKEN=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)

              # Create or update Secret
              kubectl create secret generic "$INTERNAL_SECRET_NAME" \
                --from-literal=STS_API_KEY="$API_KEY" \
                --from-literal=STS_CLUSTER_AGENT_AUTH_TOKEN="$CLUSTER_AUTH_TOKEN" \
                --dry-run=client -o yaml | kubectl apply -f -

              echo "Secret created successfully"
{{- end }}
